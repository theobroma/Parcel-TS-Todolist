{"version":3,"sources":["@store/actions.ts","@store/constants.ts","@components/TodoTextInput.tsx","@components/Header.tsx","@store/selectors.ts","@components/TodoEditInput.tsx","@components/TodoItem.tsx","@components/List.tsx","@components/FilterLink.tsx","@components/Footer.tsx","@utils/pluralize.ts","#/#/Main.tsx","@store/filter-reducer.ts","@store/todos-reducer.ts","@store/index.ts","App.tsx","configureStore.ts","@utils/localStorage.ts","serviceWorker.ts","index.tsx"],"names":["actions","addTodo","createAction","handleTodoToggle","handleTodoRemove","handleTodoToggleAll","removeCompleted","editTodo","cancelEditingTodo","changeEditingTodoTitle","saveEditingTodoTitle","TodoTextInput","React","memo","placeholder","onSave","useState","text","setText","inputRef","useRef","useEffect","current","focus","className","type","ref","value","onBlur","event","currentTarget","trim","onChange","onKeyDown","which","Header","dispatch","useDispatch","length","todosSelector","state","todos","filterSelector","filter","TodoEditInput","editingTodoTitle","useSelector","keyCode","connect","todo","isEditing","element","checked","completed","_id","htmlFor","onDoubleClick","onClick","cx","editing","List","activeTodoCount","data","editingTodoId","_handleTodoToggleAll","bool","_filterTodos","id","map","key","FilterLink","children","href","payload","setFilter","classnames","selected","Footer","word","completedCount","handleButtonClick","MainApp","footer","reduce","accum","filterReducer","action","todosInitialState","todosReducer","createReducer","uuidv4","title","find","t","rootReducer","combineReducers","store","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","totalInitialState","logger","createLogger","collapsed","middlewares","thunk","composeEnhancers","composeWithDevTools","createStore","applyMiddleware","subscribe","throttle","console","log","stringify","setItem","error","saveState","getState","configureStore","App","Main","Boolean","window","location","hostname","match","rootEl","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9e7ebfbf.chunk.js","sourcesContent":["import { createAction } from 'typesafe-actions';\nimport {\n  ADD_TODO,\n  TOGGLE_TODO,\n  REMOVE_TODO,\n  TOGGLE_ALL_TODO,\n  REMOVE_COMPLETED_TODOS,\n  SET_FILTER,\n  EDIT_TODO,\n  CANCEL_EDIT_TODO,\n  CHANGE_EDITING_TODO_TITLE,\n  SAVING_EDITING_TODO_TITLE,\n} from './constants';\n\n// create action functions\nexport const addTodo = createAction(ADD_TODO)<string>();\nexport const handleTodoToggle = createAction(TOGGLE_TODO)<string>();\nexport const handleTodoRemove = createAction(REMOVE_TODO)<string>();\nexport const handleTodoToggleAll = createAction(TOGGLE_ALL_TODO)<boolean>();\nexport const removeCompleted = createAction(REMOVE_COMPLETED_TODOS)();\nexport const editTodo = createAction(EDIT_TODO)<string>();\nexport const cancelEditingTodo = createAction(CANCEL_EDIT_TODO)();\nexport const changeEditingTodoTitle = createAction(CHANGE_EDITING_TODO_TITLE)<\n  string\n>();\nexport const saveEditingTodoTitle = createAction(SAVING_EDITING_TODO_TITLE)();\nexport const actions = {\n  addTodo,\n  handleTodoToggle,\n  handleTodoRemove,\n  handleTodoToggleAll,\n  removeCompleted,\n  editTodo,\n  cancelEditingTodo,\n  changeEditingTodoTitle,\n  saveEditingTodoTitle,\n};\n\nexport const setFilter = (filter: string) => {\n  return {\n    type: SET_FILTER,\n    payload: filter,\n  } as const;\n};\n\nexport type FilterAction = ReturnType<typeof setFilter>;\n","// action type constants\nexport const ADD_TODO = '@@todos/ADD_TODO' as const;\nexport const REMOVE_TODO = '@@todos/REMOVE_TODO' as const;\nexport const TOGGLE_TODO = '@@todos/TOGGLE_TODO' as const;\nexport const TOGGLE_ALL_TODO = '@@todos/TOGGLE_ALL_TODO' as const;\nexport const REMOVE_COMPLETED_TODOS = '@@todos/REMOVE_COMPLETED_TODOS' as const;\nexport const EDIT_TODO = '@@todos/EDIT_TODO' as const;\nexport const CANCEL_EDIT_TODO = '@@todos/CANCEL_EDIT_TODO' as const;\nexport const CHANGE_EDITING_TODO_TITLE = '@@todos/CHANGE_EDITING_TODO_TITLE' as const;\nexport const SAVING_EDITING_TODO_TITLE = '@@todos/SAVING_EDITING_TODO_TITLE' as const;\n\nexport const SET_FILTER = '@@filter/SET_FILTER' as const;\n","import React, { useState, useRef, useEffect } from 'react';\n\ninterface Props {\n  placeholder?: string;\n  onSave: (text: string) => void;\n}\n\nconst TodoTextInput: React.FC<Props> = React.memo(\n  ({ placeholder = 'What needs to be done?', onSave }) => {\n    const [text, setText] = useState('');\n\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    }, [inputRef]);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      const value = event.currentTarget.value.trim();\n      setText(value);\n    };\n\n    const handleSubmit = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      const value = event.currentTarget.value.trim();\n      if (event.which === 13) {\n        onSave(value);\n        setText(' ');\n      }\n    };\n\n    const handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n      const value = event.currentTarget.value.trim();\n      onSave(value);\n      setText(' ');\n    };\n\n    return (\n      <>\n        <input\n          className=\"new-todo\"\n          type=\"text\"\n          placeholder={placeholder}\n          ref={inputRef}\n          value={text}\n          onBlur={handleBlur}\n          onChange={handleChange}\n          onKeyDown={handleSubmit}\n        />\n      </>\n    );\n  },\n);\n\nexport default TodoTextInput;\n","import * as React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions } from '../@store/actions';\nimport TodoTextInput from './TodoTextInput';\n\nconst Header: React.FC = React.memo(() => {\n  const dispatch = useDispatch();\n  const handleSave = (text: string) => {\n    if (text.length !== 0) {\n      dispatch(actions.addTodo(text));\n    }\n  };\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n      <TodoTextInput onSave={handleSave} />\n    </header>\n  );\n});\n\nexport default Header;\n","import { RootState } from './index';\n\nexport const todosSelector = (state: RootState) => {\n  return state.todos;\n};\nexport const filterSelector = (state: RootState) => {\n  return state.filter;\n};\n","import React, { useRef, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { todosSelector } from '../@store/selectors';\nimport { actions } from '../@store/actions';\n\nconst TodoEditInput: React.FC = React.memo(() => {\n  const dispatch = useDispatch();\n  const { editingTodoTitle } = useSelector(todosSelector);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [inputRef]);\n\n  return (\n    <input\n      className=\"edit\"\n      value={editingTodoTitle}\n      onBlur={() => dispatch(actions.saveEditingTodoTitle())}\n      onChange={(event) =>\n        dispatch(actions.changeEditingTodoTitle(event.currentTarget.value))\n      }\n      onKeyDown={(event) => {\n        if (event.keyCode === 27) {\n          dispatch(actions.cancelEditingTodo());\n        } else if (event.keyCode === 13) {\n          dispatch(actions.saveEditingTodoTitle());\n        }\n      }}\n      ref={inputRef}\n    />\n  );\n});\n\nexport default TodoEditInput;\n","import * as React from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport cx from 'classnames';\nimport { actions } from '../@store/actions';\nimport { TodoType } from '../@store/types';\nimport TodoEditInput from './TodoEditInput';\n\ninterface Props {\n  todo: TodoType;\n  isEditing: boolean;\n}\n\nconst TodoItem: React.FC<Props> = ({ todo, isEditing }) => {\n  const dispatch = useDispatch();\n\n  const element = (\n    <div className=\"view\">\n      <input\n        className=\"toggle\"\n        type=\"checkbox\"\n        checked={todo.completed}\n        onChange={() => dispatch(actions.handleTodoToggle(todo._id))}\n      />\n      <label\n        htmlFor=\"itself\"\n        onDoubleClick={() => dispatch(actions.editTodo(todo._id))}\n      >\n        {todo.text}\n      </label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => dispatch(actions.handleTodoRemove(todo._id))}\n      />\n    </div>\n  );\n\n  return (\n    <li\n      className={cx({\n        completed: todo.completed,\n        editing: isEditing,\n      })}\n    >\n      {element}\n      {/* isEditing */}\n      {isEditing ? <TodoEditInput /> : null}\n    </li>\n  );\n};\n\nexport default connect(null, {})(TodoItem);\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { actions } from '../@store/actions';\nimport { todosSelector, filterSelector } from '../@store/selectors';\nimport TodoItem from './TodoItem';\nimport { TodoType } from '../@store/types';\n\ninterface Props {\n  activeTodoCount: number;\n}\n\nconst List: React.FC<Props> = React.memo(({ activeTodoCount }) => {\n  const dispatch = useDispatch();\n  const { data: todos, editingTodoId } = useSelector(todosSelector);\n  const filter = useSelector(filterSelector);\n\n  const _handleTodoToggleAll = () => {\n    const bool = activeTodoCount !== 0;\n    dispatch(actions.handleTodoToggleAll(bool));\n  };\n\n  const renderToggleAll = () => {\n    if (todos.length) {\n      return (\n        <>\n          <input\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            type=\"checkbox\"\n            onChange={_handleTodoToggleAll}\n            checked={activeTodoCount === 0}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        </>\n      );\n    }\n    return null;\n  };\n\n  const _filterTodos = (todo: TodoType) =>\n    filter === 'SHOW_ALL' ||\n    (filter === 'SHOW_ACTIVE' && !todo.completed) ||\n    (filter === 'SHOW_COMPLETED' && todo.completed);\n\n  const renderTodos = () => {\n    return todos\n      .filter(_filterTodos)\n      .map((todo: TodoType) => (\n        <TodoItem\n          key={todo._id}\n          todo={todo}\n          isEditing={editingTodoId === todo._id}\n        />\n      ));\n  };\n\n  return (\n    <section className=\"main\">\n      {renderToggleAll()}\n      <ul className=\"todo-list\">{renderTodos()}</ul>\n    </section>\n  );\n});\n\nexport default List;\n","import React from 'react';\nimport classnames from 'classnames';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterSelector } from '../@store/selectors';\nimport { setFilter } from '../@store/actions';\nimport { FilterType } from '../@store/types';\n\ninterface Props {\n  type: FilterType;\n}\n\nconst FilterLink: React.FC<Props> = React.memo(({ type, children }) => {\n  const dispatch = useDispatch();\n  const filter = useSelector(filterSelector);\n  return (\n    <li>\n      <a\n        href=\"#\"\n        onClick={() => dispatch(setFilter(type))}\n        className={classnames({ selected: filter === type })}\n      >\n        {children}\n      </a>\n    </li>\n  );\n});\n\nexport default FilterLink;\n","import * as React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions } from '../@store/actions';\nimport FilterLink from './FilterLink';\nimport { pluralize } from '../@utils/pluralize';\n\ninterface Props {\n  activeTodoCount: number;\n  completedCount: number;\n}\n\nconst Footer: React.FC<Props> = React.memo(\n  ({ activeTodoCount, completedCount }) => {\n    const dispatch = useDispatch();\n\n    const handleButtonClick = () => {\n      dispatch(actions.removeCompleted());\n    };\n\n    const renderClearButton = () => {\n      if (completedCount > 0) {\n        return (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={handleButtonClick}\n          >\n            Clear completed\n          </button>\n        );\n      }\n      return null;\n    };\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          <strong>{activeTodoCount}</strong>{' '}\n          {pluralize(activeTodoCount, 'item')} left\n        </span>\n        <ul className=\"filters\">\n          <FilterLink type=\"SHOW_ALL\">All</FilterLink>\n          <FilterLink type=\"SHOW_ACTIVE\">Active</FilterLink>\n          <FilterLink type=\"SHOW_COMPLETED\">Completed</FilterLink>\n        </ul>\n        {renderClearButton()}\n      </footer>\n    );\n  },\n);\n\nexport default Footer;\n","export function pluralize(count: number, word: string) {\n  return count === 1 ? word : `${word}s`;\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport HeaderComponent from '../../@components/Header';\nimport ListComponent from '../../@components/List';\nimport FooterComponent from '../../@components/Footer';\nimport { todosSelector } from '../../@store/selectors';\nimport { TodoType } from '../../@store/types';\n\nconst MainApp: React.FC = () => {\n  const todos = useSelector(todosSelector).data;\n\n  const activeTodoCount = todos.reduce((accum: number, todo: TodoType) => {\n    return todo.completed ? accum : accum + 1;\n  }, 0);\n\n  const completedCount = todos.length - activeTodoCount;\n\n  let footer;\n\n  if (activeTodoCount || completedCount) {\n    footer = (\n      <FooterComponent\n        activeTodoCount={activeTodoCount}\n        completedCount={completedCount}\n      />\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <section className=\"todoapp\">\n        <div>\n          {/* Header */}\n          <HeaderComponent />\n          {/* Main */}\n          <ListComponent activeTodoCount={activeTodoCount} />\n          {/* Footer */}\n          {footer}\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default MainApp;\n","// import { createReducer } from 'typesafe-actions';\nimport { SET_FILTER } from './constants';\nimport { FilterAction } from './actions';\n// import { FilterType } from './types';\n\nexport const filterInitialState = 'SHOW_ALL';\n\nexport const filterReducer = (\n  state = filterInitialState,\n  action: FilterAction,\n): string => {\n  if (action.type === SET_FILTER) {\n    return action.payload;\n  }\n  return state;\n};\n\nexport default filterReducer;\n","import { createReducer } from 'typesafe-actions';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  ADD_TODO,\n  TOGGLE_TODO,\n  REMOVE_TODO,\n  TOGGLE_ALL_TODO,\n  REMOVE_COMPLETED_TODOS,\n  EDIT_TODO,\n  CANCEL_EDIT_TODO,\n  CHANGE_EDITING_TODO_TITLE,\n  SAVING_EDITING_TODO_TITLE,\n} from './constants';\n\nimport { TodoListType, TodoActionType } from './types';\n\nexport const todosInitialState: TodoListType = {\n  data: [],\n  editingTodoId: null,\n  editingTodoTitle: '',\n};\n\nexport const todosReducer = createReducer<TodoListType, TodoActionType>(\n  todosInitialState,\n  {\n    [ADD_TODO]: (state, { payload: text }) => {\n      return {\n        ...state,\n        data: [\n          {\n            _id: uuidv4(),\n            text,\n            completed: false,\n          },\n          ...state.data,\n        ],\n      };\n    },\n    [TOGGLE_TODO]: (state, { payload: id }) => {\n      const data = state.data.map((todo) =>\n        todo._id === id ? { ...todo, completed: !todo.completed } : todo,\n      );\n      return { ...state, data };\n    },\n    [REMOVE_TODO]: (state, { payload: id }) => {\n      return {\n        ...state,\n        data: state.data.filter((todo) => todo._id !== id),\n      };\n    },\n    [TOGGLE_ALL_TODO]: (state, { payload: bool }) => {\n      const data = state.data.map((todo) => {\n        return { ...todo, completed: bool };\n      });\n      return { ...state, data };\n    },\n    [REMOVE_COMPLETED_TODOS]: (state) => {\n      return {\n        ...state,\n        data: state.data.filter((todo) => !todo.completed),\n      };\n    },\n    [EDIT_TODO]: (state, { payload: id }) => {\n      const title = state.data.find((t) => t._id === id)?.text;\n      return {\n        ...state,\n        editingTodoId: id,\n        editingTodoTitle: title,\n      };\n    },\n    [CANCEL_EDIT_TODO]: (state) => {\n      return {\n        ...state,\n        editingTodoId: null,\n      };\n    },\n    [CHANGE_EDITING_TODO_TITLE]: (state, { payload: title }) => {\n      return {\n        ...state,\n        editingTodoTitle: title,\n      };\n    },\n    [SAVING_EDITING_TODO_TITLE]: (state) => {\n      return {\n        ...state,\n        data: state.data.map((todo) =>\n          todo._id === state.editingTodoId\n            ? // transform the one with a matching id\n              { ...todo, text: state.editingTodoTitle }\n            : // otherwise return original todo\n              todo,\n        ),\n        editingTodoId: null,\n        editingTodoTitle: '',\n      };\n    },\n  },\n);\n\nexport default todosReducer;\n","import { combineReducers } from 'redux';\nimport { filterReducer } from './filter-reducer';\nimport { todosReducer } from './todos-reducer';\n\nexport const rootReducer = combineReducers({\n  todos: todosReducer,\n  filter: filterReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import * as React from 'react';\nimport { Provider } from 'react-redux';\nimport MainAppContainer from './#/#/Main';\nimport configureStore from './configureStore';\n\nconst store = configureStore();\n\nexport default function App() {\n  return (\n    <React.StrictMode>\n      <Provider store={store}>\n        <MainAppContainer />\n      </Provider>\n    </React.StrictMode>\n  );\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport throttle from 'lodash/throttle';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { loadState, saveState } from './@utils/localStorage';\nimport { rootReducer, RootState } from './@store/index';\nimport { todosInitialState } from './@store/todos-reducer';\nimport { filterInitialState } from './@store/filter-reducer';\n\nconst configureStore = () => {\n  const persistedState = loadState();\n\n  let totalInitialState: RootState = {\n    filter: filterInitialState,\n    todos: todosInitialState,\n  };\n  // if persistedState is not empty then assign parsed persistedState to initState\n  if (persistedState) {\n    totalInitialState = persistedState;\n  }\n\n  const logger = createLogger({\n    collapsed: true,\n  });\n\n  const middlewares = [thunk, logger];\n\n  const composeEnhancers = composeWithDevTools({\n    // Specify here name, actionsBlacklist, actionsCreators and other options\n  });\n\n  const store = createStore(\n    rootReducer,\n    totalInitialState,\n    composeEnhancers(applyMiddleware(...middlewares)),\n  );\n\n  store.subscribe(\n    throttle(() => {\n      console.log('saved to localStorage');\n      saveState(store.getState());\n    }, 1000),\n  );\n\n  return store;\n};\n\nexport default configureStore;\n","import { RootState } from '../@store/index';\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('reduxState');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state: RootState) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('reduxState', serializedState);\n  } catch (error) {\n    // ignore\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// All styles\nimport 'todomvc-app-css/index.css';\nimport './@assets/styles/index.scss';\n\nconst rootEl = document.getElementById('root');\nrender(<App />, rootEl);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}